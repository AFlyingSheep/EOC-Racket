#lang racket
(require "../utilities.rkt")
(require "../explicater-control.rkt")
(require racket/dict)
(provide explicate-control)

; unit test (without uniquify)
(define (Unit-test exp) 
  (display (explicate-control (Program (make-hash) (parse-exp exp))))
  (display "\n")
)

; (display (explicate-tail (parse-exp `(let ([m 3]) m))))

(Unit-test 42)
(Unit-test `(+ 42 68))
(Unit-test `(let ([x 10]) x))
(Unit-test `(let ([y (let ([x.1 20]) (let ([x.2 22]) (+ x.1 x.2)))]) y))
(Unit-test 
    `(let ([tmp0 (- 3)])
        (let ([tmp1 (- 2)])
            (let ([tmp2 (+ 1 tmp1)])
                (let ([tmp3 (+ tmp0 tmp2)])
                    (let ([tmp4 (+ 1 2)])
                        (let ([tmp5 (- 1)])
                            (let ([tmp6 (- tmp4 tmp5)])
                                (+ tmp3 tmp6)
                            )
                        )
                    )
                )
            )
        )
    )
)
