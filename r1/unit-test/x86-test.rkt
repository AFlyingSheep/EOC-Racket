#lang racket
(require "../utilities.rkt")
(require racket/dict)
(require "../select-instructions.rkt")
(require "../explicater-control.rkt")
(require "../patch-instructions.rkt")
(require "../assign-homes.rkt")

(define (Unit-test exp)
  (define eexp (explicate-control (Program (make-hash) (parse-exp exp))))
;  (display eexp)
;  (display "\n")
  (define eeexp (select-instructions eexp))
;  (display eeexp)
;  (display "\n")
  (define eeeexp (assign-homes eeexp))
  ; (display eeeexp)
  ; (display "\n")
  (define eeeeexp (patch-instructions eeeexp))
  (display eeeeexp)
  (newline)
  ; (display-prog eeeeexp)
 )

(Unit-test 42)
(Unit-test `(+ 21 42))
(Unit-test `(- 42))
(Unit-test `(let ([x (read)]) x))
(Unit-test `(let ([y (let ([x.1 20]) (let ([x.2 22]) (+ x.1 x.2)))]) y))
(Unit-test 
    `(let ([tmp0 (- 3)])
        (let ([tmp1 (- 2)])
            (let ([tmp2 (+ 1 tmp1)])
                (let ([tmp3 (+ tmp0 tmp2)])
                    (let ([tmp4 (+ 1 2)])
                        (let ([tmp5 (read)])
                            (let ([tmp6 (- tmp4 tmp5)])
                                (+ tmp3 tmp6)
                            )
                        )
                    )
                )
            )
        )
    )
)
(Unit-test `(let ([y (let ([x1 (- 20)]) (let ([x2 22]) (+ x1 x2)))]) y))
